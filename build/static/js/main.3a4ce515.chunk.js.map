{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Gasto.js","components/Listado.js","helpers.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","msj","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCrearGasto","nombre","guardarNombre","actualizarError","trim","gasto","id","shortId","generate","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostrarPregunta","guardarGastos","creaargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3a4ce515.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({msj}) => (\r\n    <p className=\"alert alert-danger error\">{msj}</p>\r\n);\r\n\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, {Fragment, useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Pregunta = ( { guardarPresupuesto, guardarRestante, actualizarPregunta } ) => {\r\n\r\n    //Definir el state\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, guardarError] = useState(false);\r\n    \r\n    // Submit para definir el presupuesto\r\n    const agregarPresupuesto = e => {\r\n        e.preventDefault();\r\n        /* IsNan() detecta si no es un numero */\r\n        if(cantidad < 1 || isNaN(cantidad)){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        guardarError(false);\r\n        guardarPresupuesto(cantidad);\r\n        guardarRestante(cantidad);\r\n        actualizarPregunta(false);\r\n    }\r\n    \r\n    return ( \r\n        <Fragment>\r\n            <h2>Coloca tu presupuesto</h2>\r\n            {error ?<Error msj=\"El presupuesto es incorrecto\"/> :null}\r\n            <form\r\n                onSubmit={agregarPresupuesto}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Coloca tu presupuesto\"\r\n                    onChange={e => guardarCantidad( parseInt(e.target.value) )}\r\n                ></input>\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Definir Presupuesto\"\r\n                ></input>\r\n            </form>\r\n        </Fragment>\r\n\r\n     );\r\n};\r\n\r\nPregunta.propTypes = {\r\n    guardarPresupuesto: PropTypes.func.isRequired,\r\n    guardarRestante: PropTypes.func.isRequired,\r\n    actualizarPregunta: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Pregunta;","import React, { useState } from 'react';\r\nimport Error from './Error';\r\nimport shortId from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ( { guardarGasto, guardarCrearGasto } ) => {\r\n\r\n    const [nombre, guardarNombre] = useState('');\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    const agregarGasto = e => {\r\n        e.preventDefault();\r\n\r\n        if(nombre.trim() === '' || cantidad < 1 || isNaN(cantidad))\r\n        {\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n        actualizarError(false);\r\n\r\n        const gasto = {\r\n            nombre,\r\n            cantidad,\r\n            id: shortId.generate()\r\n        }\r\n\r\n        guardarGasto(gasto);\r\n        guardarCrearGasto(true);\r\n        \r\n        guardarNombre('');\r\n        guardarCantidad(0);\r\n    }\r\n    return ( \r\n        <form\r\n            onSubmit={agregarGasto}\r\n        >\r\n            <h2>Agrega tus gatos aqu√≠</h2>\r\n            {error ?(<Error msj=\"Ambos campos son obligatorios o Presupuesto incorrecto\"/>) :null}\r\n            <div className=\"campo\">\r\n                <label>Nombre Gasto</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. Transporte\"\r\n                    value={nombre}\r\n                    onChange={ e => guardarNombre(e.target.value)}\r\n                ></input>\r\n            </div>\r\n\r\n            <div className=\"campo\">\r\n                <label>Cantidad Gasto</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. 300\"\r\n                    value={cantidad}\r\n                    onChange={ e => guardarCantidad(parseInt(e.target.value))}\r\n                ></input>\r\n            </div>\r\n\r\n            <input\r\n                type=\"submit\"\r\n                className=\"button-primary u-full-width\"\r\n                value=\"Agregar Gasto\"\r\n            />\r\n        </form>\r\n\r\n     );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    guardarGasto: PropTypes.func.isRequired,\r\n    guardarCrearGasto: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Gasto = ( {gasto} ) => (\r\n    <li className=\"gastos\">\r\n        <p>\r\n            {gasto.nombre}\r\n            <span className=\"gasto\">${gasto.cantidad}\r\n            </span>\r\n        </p>\r\n    </li>\r\n)\r\n\r\nGasto.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Gasto;","import React from 'react';\r\nimport Gasto from './Gasto';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Listado = ( {gastos} ) => (\r\n    <div className=\"gastos-realizados\">\r\n        <h2>Listado</h2>\r\n        {gastos.map( gasto => (\r\n            <Gasto\r\n                key={gasto.id}\r\n                gasto={gasto}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n\r\nListado.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}\r\n \r\nexport default Listado;","export const revisarPresupuesto = (presupuesto, restante) => {\r\n    let clase;\r\n    if ( (presupuesto / 4) > restante ){\r\n        clase = 'alert alert-danger';\r\n    } else if (( presupuesto / 2) > restante) {\r\n        clase = 'alert alert-warning';\r\n    } else {\r\n        clase = 'alert alert-success';\r\n    }\r\n\r\n    return clase;\r\n}","import React, { Fragment } from 'react';\r\nimport {revisarPresupuesto} from '../helpers'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ControlPresupuesto = ( {presupuesto, restante}) => {\r\n    return ( \r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Presupuesto: $ {presupuesto}\r\n            </div>\r\n            <div className={revisarPresupuesto(presupuesto, restante)}>\r\n                Restante: $ {restante}\r\n            </div>\r\n        </Fragment>\r\n     );\r\n};\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante: PropTypes.number.isRequired\r\n}\r\n \r\nexport default ControlPresupuesto;","import React, { useState, useEffect } from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\nfunction App() {\n\n  const [presupuesto, guardarPresupuesto] = useState(0);\n  const [restante, guardarRestante] = useState(0);\n  const [mostrarPregunta, actualizarPregunta] = useState(true);\n  const [gastos, guardarGastos] = useState([]);\n  const [gasto, guardarGasto] = useState({});\n  const [creaargasto, guardarCrearGasto] = useState(false);\n\n\n  // UseEffect que actualiza el restante\n  useEffect(() => {\n \n    if(creaargasto){\n      guardarGastos([\n        ...gastos,\n        gasto\n      ]);\n      const presupuestoRestante = restante - gasto.cantidad;\n      guardarRestante(presupuestoRestante);\n      \n      guardarCrearGasto(false);\n    }\n\n  }, [gasto, creaargasto, gastos, restante]); \n  \n\n/*   //Agregemos gasto\n  const agregarNuevoGasto = gasto => {\n    guardarGastos([\n      ...gastos,\n      gasto\n    ]);\n  } */\n\n  return (\n      <div className=\"container\">\n        <h1>Gasto Semanal</h1>\n        \n        <div className=\"contenido-principal contenido\">\n          {mostrarPregunta ? (\n            <Pregunta \n              guardarPresupuesto={guardarPresupuesto}\n              guardarRestante={guardarRestante}\n              actualizarPregunta={actualizarPregunta}\n            />\n          ) : (\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Formulario \n                  guardarGasto={guardarGasto}\n                  guardarCrearGasto={guardarCrearGasto}\n                />\n              </div>\n              <div className=\"one-half column\">\n                <Listado \n                  gastos={gastos}\n                />\n                <ControlPresupuesto \n                  presupuesto={presupuesto}\n                  restante={restante}\n                />\n              \n              </div>\n            </div>\n          ) \n          }\n          \n\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}